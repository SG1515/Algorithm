
import java.io.*;
import java.util.*;
class Main {
	static int[] dx = {-1, 0, 1, 0};
	static int[] dy = {0, 1, 0, -1}; 
	static int[][] arr;
	static int count =0;
	static int n;
	static boolean[][] visited;
	static int answer =0;
	static boolean check= false;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		

		n = Integer.parseInt(st.nextToken());
		arr = new int[n][n];
		visited = new boolean[n][n];
		
		for(int i=0; i<n; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j=0; j<n; j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		

		for(int i=0; i<n; i++) {
			for(int j=0; j<n; j++ ) {
				for(int k=0; k<n; k++ ) {
					Arrays.fill(visited[k], false);
				}
				count = 0;
				if (arr[i][j] == 1) {
					dfs(i, j);
					if (count > answer) {
						answer = count;
					} 
				}				
			}
		} 
		if (answer > 1) {
			check = true;
		}
		if (check){
			System.out.println(answer);
		} else {
			System.out.println(0);
		}
	} // end of main 
	
	public static void dfs(int x, int y) {
		visited[x][y] = true;
		count++;
		
		for (int i=0; i<4; i++) {
			int nextX = x + dx[i];
			int nextY = y + dy[i];
			
			if (range(nextX, nextY) && arr[nextX][nextY] == 1) {
				if(!visited[nextX][nextY]){
					dfs(nextX, nextY);
					visited[nextX][nextY] = false;
				}
			}
		}
	}
	
	public static boolean range(int x, int y){ // 범위보다 넘으면 false
		return x >= 0 && y >= 0 && x <n && y<n; 
	}
	
	
}